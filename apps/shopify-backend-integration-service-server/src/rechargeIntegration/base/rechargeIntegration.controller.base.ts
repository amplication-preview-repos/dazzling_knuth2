/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RechargeIntegrationService } from "../rechargeIntegration.service";
import { RechargeIntegrationCreateInput } from "./RechargeIntegrationCreateInput";
import { RechargeIntegration } from "./RechargeIntegration";
import { RechargeIntegrationFindManyArgs } from "./RechargeIntegrationFindManyArgs";
import { RechargeIntegrationWhereUniqueInput } from "./RechargeIntegrationWhereUniqueInput";
import { RechargeIntegrationUpdateInput } from "./RechargeIntegrationUpdateInput";

export class RechargeIntegrationControllerBase {
  constructor(protected readonly service: RechargeIntegrationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RechargeIntegration })
  async createRechargeIntegration(
    @common.Body() data: RechargeIntegrationCreateInput
  ): Promise<RechargeIntegration> {
    return await this.service.createRechargeIntegration({
      data: data,
      select: {
        createdAt: true,
        deliveryDate: true,
        id: true,
        rechargeCustomerId: true,
        rechargeSubscriptionId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RechargeIntegration] })
  @ApiNestedQuery(RechargeIntegrationFindManyArgs)
  async rechargeIntegrations(
    @common.Req() request: Request
  ): Promise<RechargeIntegration[]> {
    const args = plainToClass(RechargeIntegrationFindManyArgs, request.query);
    return this.service.rechargeIntegrations({
      ...args,
      select: {
        createdAt: true,
        deliveryDate: true,
        id: true,
        rechargeCustomerId: true,
        rechargeSubscriptionId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RechargeIntegration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rechargeIntegration(
    @common.Param() params: RechargeIntegrationWhereUniqueInput
  ): Promise<RechargeIntegration | null> {
    const result = await this.service.rechargeIntegration({
      where: params,
      select: {
        createdAt: true,
        deliveryDate: true,
        id: true,
        rechargeCustomerId: true,
        rechargeSubscriptionId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RechargeIntegration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRechargeIntegration(
    @common.Param() params: RechargeIntegrationWhereUniqueInput,
    @common.Body() data: RechargeIntegrationUpdateInput
  ): Promise<RechargeIntegration | null> {
    try {
      return await this.service.updateRechargeIntegration({
        where: params,
        data: data,
        select: {
          createdAt: true,
          deliveryDate: true,
          id: true,
          rechargeCustomerId: true,
          rechargeSubscriptionId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RechargeIntegration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRechargeIntegration(
    @common.Param() params: RechargeIntegrationWhereUniqueInput
  ): Promise<RechargeIntegration | null> {
    try {
      return await this.service.deleteRechargeIntegration({
        where: params,
        select: {
          createdAt: true,
          deliveryDate: true,
          id: true,
          rechargeCustomerId: true,
          rechargeSubscriptionId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
