/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RechargeIntegration } from "./RechargeIntegration";
import { RechargeIntegrationCountArgs } from "./RechargeIntegrationCountArgs";
import { RechargeIntegrationFindManyArgs } from "./RechargeIntegrationFindManyArgs";
import { RechargeIntegrationFindUniqueArgs } from "./RechargeIntegrationFindUniqueArgs";
import { CreateRechargeIntegrationArgs } from "./CreateRechargeIntegrationArgs";
import { UpdateRechargeIntegrationArgs } from "./UpdateRechargeIntegrationArgs";
import { DeleteRechargeIntegrationArgs } from "./DeleteRechargeIntegrationArgs";
import { RechargeIntegrationService } from "../rechargeIntegration.service";
@graphql.Resolver(() => RechargeIntegration)
export class RechargeIntegrationResolverBase {
  constructor(protected readonly service: RechargeIntegrationService) {}

  async _rechargeIntegrationsMeta(
    @graphql.Args() args: RechargeIntegrationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RechargeIntegration])
  async rechargeIntegrations(
    @graphql.Args() args: RechargeIntegrationFindManyArgs
  ): Promise<RechargeIntegration[]> {
    return this.service.rechargeIntegrations(args);
  }

  @graphql.Query(() => RechargeIntegration, { nullable: true })
  async rechargeIntegration(
    @graphql.Args() args: RechargeIntegrationFindUniqueArgs
  ): Promise<RechargeIntegration | null> {
    const result = await this.service.rechargeIntegration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RechargeIntegration)
  async createRechargeIntegration(
    @graphql.Args() args: CreateRechargeIntegrationArgs
  ): Promise<RechargeIntegration> {
    return await this.service.createRechargeIntegration({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RechargeIntegration)
  async updateRechargeIntegration(
    @graphql.Args() args: UpdateRechargeIntegrationArgs
  ): Promise<RechargeIntegration | null> {
    try {
      return await this.service.updateRechargeIntegration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RechargeIntegration)
  async deleteRechargeIntegration(
    @graphql.Args() args: DeleteRechargeIntegrationArgs
  ): Promise<RechargeIntegration | null> {
    try {
      return await this.service.deleteRechargeIntegration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
